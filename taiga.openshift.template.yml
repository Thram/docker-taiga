apiVersion: v1
kind: Template
metadata:
  name: taiga-template
  annotations:
    description: "Taiga is a project management platform for agile developers & designers and project managers who want a beautiful tool that makes work truly enjoyable."
    # iconClass: "icon-redis"
    # tags: "database,nosql"
objects:
  - kind: Secret
    apiVersion: v1
    metadata:
      name: postgresql
    data:
      database-name: dGFpZ2E=
      database-password: bXktcG9zdGdyZXNxbC1wYXNzd29yZC10YWlnYQ==
      database-user: dGFpZ2E=
  - kind: Secret
    apiVersion: v1
    metadata:
      name: rabbit
    data:
      rabbit-cookie: bXktcmFiYml0LXNlY3JldC1jb29raWUtdGFpZ2E=
      rabbit-password: bXktcmFiYml0LXBhc3N3b3JkLXRhaWdh
      rabbit-user: dGFpZ2E=
      rabbit-vhost: dGFpZ2E=
  - kind: Secret
    apiVersion: v1
    metadata:
      name: django
    data:
      django-secret-key: bXktZGphbmdvLXNlY3JldC1rZXktdGFpZ2E=
  - kind: Secret
  - kind: Secret
    apiVersion: v1
    metadata:
      name: redis
    data:
      redis-password: bXktcmVkaXMtcGFzc3dvcmQtdGFpZ2E=
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: backend-claim1
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: celeryworker-claim1
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: dockertaiga-postgres-backup
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: dockertaiga-postgres-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: dockertaiga-taiga-backend-media
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi

      runPolicy: "Serial"
      source:
        git:
          uri: "https://github.com/Thram/docker-taiga"
        contextDir: "frontend"
      strategy:
        type: Docker
        ? dockerStrategy
      output:
        to:
          kind: "ImageStreamTag"
          name: "frontend:latest"
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: backend
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: events
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: frontend
  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      name: backend
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: "backend:latest"
      runPolicy: Serial
      source:
        contextDir: backend
        git:
          uri: "https://github.com/Thram/docker-taiga"
        type: Git
      strategy:
        ? dockerStrategy
        type: Docker
      triggers:
        - github:
            secret: secret101
          type: GitHub
        - generic:
            secret: secret101
          type: Generic
  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      name: "events"
    spec:
      runPolicy: "Serial"
      source:
        git:
          uri: "https://github.com/Thram/docker-taiga"
        contextDir: "events"
      strategy:
        type: Docker
        ? dockerStrategy
      output:
        to:
          kind: "ImageStreamTag"
          name: "events:latest"
  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      name: frontend
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: "frontend:latest"
      runPolicy: Serial
      source:
        contextDir: frontend
        git:
          uri: "https://github.com/Thram/docker-taiga"
        type: Git
      strategy:
        dockerStrategy: {}
        type: Docker
  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      name: postgresql
    spec:
      replicas: 1
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: postgresql
        spec:
          containers:
            - env:
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: postgresql
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: postgresql
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: postgresql
              image: postgres:10-alpine
              name: postgresql
              ports:
                - containerPort: 5432
                  protocol: TCP
              volumeMounts:
                - mountPath: /var/lib/postgresql/data
                  name: dockertaiga-postgres-data
                - mountPath: /backups
                  name: dockertaiga-postgres-backup
          restartPolicy: Always
          volumes:
            - name: dockertaiga-postgres-data
              persistentVolumeClaim:
                claimName: dockertaiga-postgres-data
            - name: dockertaiga-postgres-backup
              persistentVolumeClaim:
                claimName: dockertaiga-postgres-backup
  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      name: rabbitmq
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            name: rabbitmq
        spec:
          containers:
            - env:
                - name: RABBITMQ_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: rabbit-password
                      name: rabbit
                - name: RABBITMQ_USER
                  valueFrom:
                    secretKeyRef:
                      key: rabbit-user
                      name: rabbit
                - name: RABBITMQ_VHOST
                  valueFrom:
                    secretKeyRef:
                      key: rabbit-vhost
                      name: rabbit
                - name: RABBITMQ_ERLANG_COOKIE
                  valueFrom:
                    secretKeyRef:
                      key: rabbit-cookie
                      name: rabbit
              image: rabbitmq:3.6-alpine
              name: rabbitmq
              ports:
                - containerPort: 4369
                - containerPort: 5671
                - containerPort: 5672
                - containerPort: 25672
          restartPolicy: Always
  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      name: redis
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            name: redis
        spec:
          containers:
            - image: redis:4.0-alpine
              name: redis
              ports:
                - containerPort: 6379
          restartPolicy: Always
  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      name: celeryworker
    spec:
      replicas: 1
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: celeryworker
        spec:
          containers:
            - args:
                - celery -A taiga worker -P gevent -c "4" --loglevel info;
              command: ["/bin/sh", "-c"]
              env:
                - name: DJANGO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: django-secret-key
                      name: django
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: postgresql
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: postgresql
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: postgresql
                - name: HOSTNAME
                  value: localhost
                - name: SSL_ENABLED
                  value: True
              image: docker-registry.default.svc:5000/taiga/backend:latest
              name: celeryworker
              resources: {}
              volumeMounts:
                - mountPath: /taiga-backend/media
                  name: dockertaiga-taiga-backend-media
                - mountPath: /taiga-backend/static-root
                  name: celeryworker-claim1
          restartPolicy: Always
          volumes:
            - name: dockertaiga-taiga-backend-media
              persistentVolumeClaim:
                claimName: dockertaiga-taiga-backend-media
            - name: celeryworker-claim1
              persistentVolumeClaim:
                claimName: celeryworker-claim1
  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      name: backend
    spec:
      replicas: 1
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: backend
        spec:
          containers:
            - args:
                - /scripts/entrypoint.sh; gunicorn -b 0.0.0.0:8000 taiga.wsgi;
              command: ["/bin/sh", "-c"]
              env:
                - name: DJANGO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: django-secret-key
                      name: django
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: postgresql
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: postgresql
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: postgresql
                - name: HOSTNAME
                  value: localhost
                - name: SSL_ENABLED
                  value: True
              image: docker-registry.default.svc:5000/taiga/backend:latest
              name: backend
              ports:
                - containerPort: 8000
              volumeMounts:
                - mountPath: /taiga-backend/media
                  name: dockertaiga-taiga-backend-media
                - mountPath: /taiga-backend/static-root
                  name: backend-claim1
          restartPolicy: Always
          volumes:
            - name: dockertaiga-taiga-backend-media
              persistentVolumeClaim:
                claimName: dockertaiga-taiga-backend-media
            - name: backend-claim1
              persistentVolumeClaim:
                claimName: backend-claim1
  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      name: events
    spec:
      replicas: 1
      strategy: {}
      template:
        metadata:
          labels:
            name: events
        spec:
          containers:
            - env:
                - name: DJANGO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: django-secret-key
                      name: django
              image: >-
                172.30.1.1:5000/taiga-template/events@sha256:7a87409bddd12548fdf1c01d93f39d2d1dc297188d34315b780102417cbe2673
              name: events
              resources: {}
              ports:
                - containerPort: 8888
          restartPolicy: Always
  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      name: frontend
    spec:
      replicas: 1
      strategy: {}
      template:
        metadata:
          labels:
            name: frontend
        spec:
          containers:
            - env:
                - name: DJANGO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: django-secret-key
                      name: django
              image: DOCKER_REGISTRY_URL/NAMESPACE/frontend:latest
              name: frontend
              ports:
                - containerPort: 80
              resources: {}
              volumeMounts:
                - mountPath: /taiga-backend/media
                  name: dockertaiga-taiga-backend-media
                - mountPath: /taiga-backend/static-root
                  name: backend-claim1
          restartPolicy: Always
          volumes:
            - name: dockertaiga-taiga-backend-media
              persistentVolumeClaim:
                claimName: dockertaiga-taiga-backend-media
            - name: backend-claim1
              persistentVolumeClaim:
                claimName: backend-claim1
  - kind: Service
    apiVersion: v1
    metadata:
      name: frontend
    spec:
      ports:
        - name: "80"
          port: 80
          targetPort: 80
      selector:
        name: frontend
  - kind: Service
    apiVersion: v1
    metadata:
      name: backend
    spec:
      ports:
        - name: "8000"
          port: 8000
          targetPort: 8000
      selector:
        name: backend
  - kind: Service
    apiVersion: v1
    metadata:
      name: events
    spec:
      ports:
        - name: "8888"
          port: 8888
          targetPort: 8888
      selector:
        name: events
  - kind: Service
    apiVersion: v1
    metadata:
      name: postgresql
    spec:
      ports:
        - name: "5432"
          port: 5432
          ? targetPort
      selector:
        name: postgresql
  - kind: Service
    apiVersion: v1
    metadata:
      name: redis
    spec:
      ports:
        - name: "6379"
          port: 6379
          targetPort: 6379
      selector:
        name: redis
  - kind: Service
    apiVersion: v1
    metadata:
      name: rabbitmq
    spec:
      ports:
        - name: "5672"
          port: 5672
          targetPort: 5672
      selector:
        name: rabbitmq
